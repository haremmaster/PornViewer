
var EventEmitter = require ('events').EventEmitter;
var util = require ('util');
var path = require ('path');
var uid = require ('infosex').uid.craft;
var gui = global.window.nwDispatcher.requireNwGui();

var IMAGE_EXT = [ '.jpg', '.jpeg', '.png', '.gif' ];
var THUMBS_DIR = path.join (gui.App.dataPath, 'thumbs');
var THUMB_VID_ERR = 'file://' + path.join (__dirname, '../vidErrThumb.png');
var THUMB_IMG_ERR = 'file://' + path.join (__dirname, '../imgErrThumb.png');
var DEFAULT_STATS = {
    type:       undefined,
    size:       0,
    created:    0,
    modified:   0
};

var dbReady = false, dbQueue = [];
var db = window.openDatabase ('pornviewer', '', 'image info', 10000 * 1024);
db.changeVersion (db.version, "1.3", function (tx) {
    tx.executeSql ('ALTER TABLE IF EXISTS images ADD extra');
    tx.executeSql ('CREATE TABLE IF NOT EXISTS images (id unique, directory, filename, thumbnail, pad, type, size, created, modified, extra, Primary Key (id))');
    tx.executeSql ('CREATE UNIQUE INDEX IF NOT EXISTS directory ON images (directory, filename)');
    // tx.executeSql ('CREATE TABLE metadata (image, key, value, Foreign Key (image))');
    // tx.executeSql ('CREATE INDEX image ON metadata (image)');
}, function (err) {
    // database failure
    console.log ('db failed', err);
}, function(){
    console.log ('db ready');
});

function Pron (warrior, directory, filename) {
    EventEmitter.call (this);
    this.warrior = warrior;
    this.directory = directory;
    this.filename = filename;
    this.fullpath = path.join (directory, filename);
    this.extra = {};

    var isImage = false;
    for (var i=0,j=IMAGE_EXT.length; i<j; i++) {
        var ext = IMAGE_EXT[i];
        if (filename.slice (-1 * ext.length) == ext) {
            isImage = true;
            break;
        }
    }
    this.isImage = isImage;
    this.isVideo = !isImage;

    var self = this;
    db.transaction (function (tx) {
        tx.executeSql (
            'SELECT * FROM images WHERE directory=(?) AND filename=(?)',
            [ directory, filename ],
            function (tx, results) {
                self.initialized = true;
                if (!results.rows.length) {
                    console.log ('no row');
                    self.updateThumbnail ();
                    return;
                }

                var row = results.rows.item(0);
                self.row = row;
                self.pad = row.pad;
                self.stats = {
                    type:       row.type,
                    size:       row.size,
                    created:    row.created,
                    modified:   row.modified
                };
                try {
                    self.extra = JSON.parse (row.extra);
                    self.extraString = row.extra;
                } catch (err) {
                    console.log ('extra error', err);
                }
                self.emit ('thumb', path.join (THUMBS_DIR, row.thumbnail), row.pad, self.stats);
            }
        );
    });
}
util.inherits (Pron, EventEmitter);

Pron.prototype.updateThumbnail = function (oldThumb) {
    var self = this;
    var newThumbFilename;

    function postProcess (err, pad, stats) {
        if (oldThumb)
            fs.unlink (oldThumb);
        self.pad = pad || 0;
        if (stats)
            self.stats = stats;
        else
            self.stats = DEFAULT_STATS;
        if (err) {
            console.log ('failed to update thumbnail for '+path.join (self.directory, self.filename));
            self.emit (
                'thumb',
                self.isImage ? THUMB_IMG_ERR : THUMB_VID_ERR,
                0,
                self.stats
            );
            return;
        }
        db.transaction (function (tx) {
            tx.executeSql (
                'INSERT OR REPLACE INTO images (directory, filename, thumbnail, pad, type, size, created, modified, extra) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)',
                [ self.directory, self.filename, newThumbFilename, self.pad, stats.type, stats.size, stats.created, stats.modified, JSON.stringify (self.extra) ]
            );
        });
        self.emit ('thumb', path.join (THUMBS_DIR, newThumbFilename), pad, stats);
    }

    uid (function (newID) {
        newThumbFilename = newID + '.png';
        var newThumbPath = path.join (THUMBS_DIR, newThumbFilename);
        if (self.isVideo)
            self.warrior.processVideoThumb (self.fullpath, newThumbPath, postProcess);
        else
            self.warrior.processThumb (self.fullpath, newThumbPath, postProcess);
    });
};

Pron.prototype.saveExtra = function(){
    var newStr = JSON.stringify (this.extra);
    console.log ('saveExtra?', newStr !== this.extraString);
    if (newStr === this.extraString)
        return;
    this.extraString = newStr;
    var self = this;
    db.transaction (function (tx) {
        console.log ('save extra', self.directory, self.filename, self.extra);
        tx.executeSql (
            'UPDATE images SET extra=? WHERE directory=? AND filename=?',
            [ newStr, self.directory, self.filename ]
        );
    });
};

module.exports = Pron;
