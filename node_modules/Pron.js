
var fs = require ('fs');
var EventEmitter = require ('events').EventEmitter;
var util = require ('util');
var path = require ('path');
var async = require ('async');
var uid = require ('infosex').uid.craft;
var gui = global.window.nwDispatcher.requireNwGui();

var IMAGE_EXT = [ '.jpg', '.jpeg', '.png', '.gif' ];
var THUMBS_DIR = path.join (gui.App.dataPath, 'thumbs');
var THUMB_VID_ERR = 'file://' + path.join (__dirname, '../vidErrThumb.png');
var THUMB_IMG_ERR = 'file://' + path.join (__dirname, '../imgErrThumb.png');
var DEFAULT_STATS = {
    type:       undefined,
    size:       0,
    created:    0,
    modified:   0
};

var dbReady = false, dbQueue = [];
var db = window.openDatabase ('pornviewer', '', 'image info', 10000 * 1024);
db.changeVersion (db.version, "1.4", function (tx) {
    // tx.executeSql ('ALTER TABLE images ADD extra, width, height, pixels, length');
    tx.executeSql (
        'CREATE TABLE IF NOT EXISTS images ('
      + 'id unique, directory, filename, thumbnail, pad, type, size, created, modified, '
      + 'extra, width, height, pixels, length, '
      + 'Primary Key (id)'
      + ')'
    );
    tx.executeSql ('CREATE UNIQUE INDEX IF NOT EXISTS directory ON images (directory, filename)');
    // tx.executeSql ('CREATE TABLE metadata (image, key, value, Foreign Key (image))');
    // tx.executeSql ('CREATE INDEX image ON metadata (image)');
}, function (err) {
    // database failure
    console.log ('db failed', err);
}, function(){
    console.log ('db ready');
});

function Pron (warrior, directory, filename) {
    EventEmitter.call (this);

    var last = directory[directory.length-1];
    if (last == '/' || last == '\\')
        directory = directory.slice (0, -1);

    this.warrior = warrior;
    this.directory = directory;
    this.filename = filename;
    this.fullpath = path.join (directory, filename);
    this.extra = {};

    var isImage = false;
    for (var i=0,j=IMAGE_EXT.length; i<j; i++) {
        var ext = IMAGE_EXT[i];
        if (filename.slice (-1 * ext.length) == ext) {
            isImage = true;
            break;
        }
    }
    this.isImage = isImage;
    this.isVideo = !isImage;

    var self = this;

    // make the "thumb" event sticky
    this.on ('newListener', function (event, listener) {
        if (event != 'thumb' || !self.thumbnail)
            return;
        listener.call (self, self.thumbnail, self.pad, self.stats);
    });
}
util.inherits (Pron, EventEmitter);

Pron.prototype.update = function(){
    var self = this;
    var filestats, row;
    async.parallel ([
        function (callback) {
            db.transaction (function (tx) {
                tx.executeSql (
                    'SELECT * FROM images WHERE directory=(?) AND filename=(?)',
                    [ self.directory, self.filename ],
                    function (tx, results) {
                        self.initialized = true;
                        if (results.rows.length)
                            row = results.rows.item(0);
                        callback();
                    }
                );
            });
        },
        function (callback) {
            fs.stat (self.fullpath, function (err, stats) {
                if (err)
                    return callback (err);
                filestats = stats;
                callback();
            });
        }
    ], function (err) {
        if (err) {
            self.emit ('error', err);
            return;
        }

        self.stats = {
            size:       filestats.size,
            created:    filestats.ctime,
            modified:   filestats.mtime
        }

        if (!row || row.modified < filestats.mtime) {
            self.updateThumbnail ();
            return;
        }

        self.row = row;
        self.pad = row.pad;
        self.thumbnail = path.join (THUMBS_DIR, row.thumbnail);
        self.stats = {
            type:       row.type,
            size:       row.size,
            created:    row.created,
            modified:   row.modified,
            width:      row.width,
            height:     row.height,
            pixels:     row.pixels,
            length:     row.length
        };
        try {
            self.extra = JSON.parse (row.extra);
            self.extraString = row.extra;
        } catch (err) {
            self.extra = {};
        }
        self.emit ('thumb', self.thumbnail, row.pad, self.stats);
    });
};

Pron.prototype.updateThumbnail = function(){
    var self = this;
    var newThumbFilename;

    function postProcess (err, pad, stats) {
        self.pad = pad || 0;
        if (stats)
            self.stats = stats;
        else
            self.stats = DEFAULT_STATS;
        if (err) {
            console.log ('failed to update thumbnail for '+path.join (self.directory, self.filename));
            self.emit (
                'thumb',
                self.isImage ? THUMB_IMG_ERR : THUMB_VID_ERR,
                0,
                self.stats
            );
            return;
        }
        db.transaction (function (tx) {
            tx.executeSql (
                'INSERT OR REPLACE INTO images ('
                  + 'directory, '
                  + 'filename, '
                  + 'thumbnail, '
                  + 'pad, '
                  + 'type, '
                  + 'size, '
                  + 'created, '
                  + 'modified, '
                  + 'extra, '
                  + 'width, '
                  + 'height, '
                  + 'pixels, '
                  + 'length'
                  + ') VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',
                [
                    self.directory,
                    self.filename,
                    newThumbFilename,
                    self.pad,
                    stats.type,
                    stats.size,
                    stats.created,
                    stats.modified,
                    JSON.stringify (self.extra),
                    stats.width,
                    stats.height,
                    stats.pixels,
                    stats.length || null
                ]
            );
        });
        if (self.thumbnail) {
            var oldThumb = self.thumbnail;
            setTimeout (function(){
                fs.unlink (oldThumb);
            }, 500);
        }
        self.thumbnail = path.join (THUMBS_DIR, newThumbFilename);
        self.emit ('thumb', self.thumbnail, pad, stats);
    }

    uid (function (newID) {
        newThumbFilename = newID + '.png';
        var newThumbPath = path.join (THUMBS_DIR, newThumbFilename);
        if (self.isVideo)
            self.warrior.processVideoThumb (self.fullpath, newThumbPath, postProcess);
        else
            self.warrior.processThumb (self.fullpath, newThumbPath, postProcess);
    });
};

Pron.prototype.saveExtra = function (callback) {
    var newStr = JSON.stringify (this.extra);
    if (newStr === this.extraString) {
        if (callback)
            process.nextTick (callback);
        return;
    }
    this.extraString = newStr;
    var self = this;
    db.transaction (function (tx) {
        tx.executeSql (
            'UPDATE images SET extra=? WHERE directory=? AND filename=?',
            [ newStr, self.directory, self.filename ],
            function(){
                if (callback)
                    callback();
            },
            function (err) {
                if (callback)
                    callback (err);
            }
        );
    });
};

Pron.removeThumb = function (directory, filename) {
    db.transaction (function (tx) {
        tx.executeSql (
            'REMOVE FROM images WHERE directory=(?) AND filename=(?)',
            [ directory, filename ]
        );
    });
}

module.exports = Pron;
